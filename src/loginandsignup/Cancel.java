package loginandsignup;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 
 */
public class Cancel extends javax.swing.JFrame {
    private Home2 home;
    private String username;
    String SUrl = "jdbc:mysql://localhost:3306/busresv";
    String SUser = "root";
    String SPass = "123";
    /**
     * Creates new form Cancel
     */
    public Cancel(String email,Home2 home) {
        initComponents();
        this.username = email;
        this.home = home;
        displayData(email);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        FullCancel = new javax.swing.JButton();
        PartailCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FullCancel.setText(" FULL CANCEL");
        FullCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullCancelActionPerformed(evt);
            }
        });

        PartailCancel.setText("PARTIAL CANCEL");
        PartailCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PartailCancelActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Passenger_Name", "Bus_No", "Travel_Date", "Ticket_No", "Fare", "Departure", "Arrival", "StartingPt", "Destination", "Seat_No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loginandsignup/THE BLUE BUS1.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("LOGOUT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FullCancel)
                            .addComponent(PartailCancel)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(152, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(91, 91, 91)
                        .addComponent(FullCancel)
                        .addGap(99, 99, 99)
                        .addComponent(PartailCancel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FullCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullCancelActionPerformed
        String date = JOptionPane.showInputDialog(this, "Enter the date to cancel the bus (yyyy-MM-dd):");
    
        // Check if the user pressed Cancel or entered an empty date
        if (date == null || date.trim().isEmpty()) {
            return;
        }
    
        // Ask for confirmation
        int confirmResult = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel all tickets for the selected date?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );
    
        // Check user's confirmation
        if (confirmResult == JOptionPane.YES_OPTION) {
            // User confirmed, perform the database update to cancel the bus for the given date
            cancelBusForDate(username, date);
    
            // Refresh the displayed data
            displayData(username);
        }
    }                                          
//GEN-LAST:event_FullCancelActionPerformed
    private void PartailCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PartailCancelActionPerformed
        // Get the selected row index
        int selectedRowIndex = jTable1.getSelectedRow();
    
        // Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row from the table to cancel.");
            return;
        }
    
        // Get the seat number from the selected row
        int seatNumber = (int) jTable1.getValueAt(selectedRowIndex, 9);
    
        // Ask for confirmation
        int confirmResult = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel the selected seat?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );
    
        // Check user's confirmation
        if (confirmResult == JOptionPane.YES_OPTION) {
            // User confirmed, perform the database update to cancel the ticket for the given seat
            cancelTicketForSeat(username, seatNumber);
    
            // Refresh the displayed data
            displayData(username);
        }
    }//GEN-LAST:event_PartailCancelActionPerformed
    private int getCanceledTicketFare() {
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow != -1) {
        // Assuming the fare is stored in the fifth column (index 4) of your table model
        return (int) jTable1.getValueAt(selectedRow, 4);
    } else {
        // No row is selected, handle this case accordingly
        return 0; // You may want to throw an exception or return a special value
    }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        goBackToHome(); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Login LoginFrame = new Login();
        LoginFrame.setVisible(true);
        LoginFrame.pack();
        LoginFrame.setLocationRelativeTo(null);
        this.dispose();        
    }//GEN-LAST:event_jButton2ActionPerformed
    private void goBackToHome() {
        // Assuming the Home2 instance is stored in 'home'
        home.setUser(username); // Set the user's email in Home2
        home.setVisible(true);
        home.pack();
        home.setLocationRelativeTo(null);
        this.dispose();
    }
    private void cancelBusForDate(String email, String date) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
        String query = "DELETE FROM booking WHERE email = ? AND travel_date = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, email);
            preparedStatement.setString(2, date);
            int rowsAffected = preparedStatement.executeUpdate();
            System.out.println(rowsAffected + " row(s) deleted for FullCancel");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception as needed
    }

    }

    private void cancelTicketForSeat(String email, int seatNumber) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "DELETE FROM booking WHERE email = ? AND seat_no = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, email);
                preparedStatement.setInt(2, seatNumber);
                int rowsAffected = preparedStatement.executeUpdate();
                System.out.println(rowsAffected + " row(s) deleted for PartialCancel");
                 int canceledTicketFare = getCanceledTicketFare();

    if (canceledTicketFare > 0) {
        // Add the canceled ticket amount to the user's wallet
        addToWallet(username, canceledTicketFare);

        // Refresh the displayed data in the table
        displayData(username);
    } else {
        // Handle the case where no row is selected or fare is not positive
        JOptionPane.showMessageDialog(this, "Please select a valid ticket to cancel.", "Invalid Action", JOptionPane.WARNING_MESSAGE);
    }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    
    }
    private void addToWallet(String username, double amount) {
    try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
        String query = "UPDATE wallet SET amount = amount + ? WHERE username = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setDouble(1, amount);
            preparedStatement.setString(2, username);
            preparedStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Handle the exception appropriately
    }
}

    /**
     * @param args the command line arguments
     */
    private void displayData(String email) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "SELECT * FROM booking WHERE email = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, email);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.setRowCount(0);
                    while (resultSet.next()) {
                        String passengerName = resultSet.getString(1);
                        int busNo = resultSet.getInt(2);
                        Date travelDate = resultSet.getDate(3);
                        int ticketNo = resultSet.getInt(4);
                        int fare = resultSet.getInt(5);
                        String departureTime = resultSet.getString(6);
                        String arrivalTime = resultSet.getString(7);
                        String startingPt = resultSet.getString(8);
                        String destination = resultSet.getString(9);
                        int seatNo = resultSet.getInt(11);
                        model.addRow(new Object[]{
                                passengerName, busNo, travelDate, ticketNo, fare,
                                departureTime, arrivalTime, startingPt, destination, seatNo
                        });
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        } finally {
            // Close resources in a finally block
            // Close the connection, statement, and result set here if needed
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String email = "YourEmail@example.com";
                Home2 home = new Home2();
                new Cancel(email,new Home2()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FullCancel;
    private javax.swing.JButton PartailCancel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
