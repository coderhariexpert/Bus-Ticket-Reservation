/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginandsignup;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 
 */
public class Cancel1 extends javax.swing.JFrame {
    private Home2 home;
    private String username;
    String SUrl = "jdbc:mysql://localhost:3306/busresv";
    String SUser = "root";
    String SPass = "123";
    /**
     * Creates new form Cancel1
     */
    public Cancel1(String email, Home2 home) {
        initComponents();
        this.username = email;
        this.home = home;
        displayData(email);
        goBackToHome();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loginandsignup/THE BLUE BUS1.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Full Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Partial Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ticket No", "Total Passengers", "Bus No", "From ", "To", "Departure_Time", "Arival Time", "Travel_Date", "Fare"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        jTable1.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        goBackToHome();     // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String ticketNo = JOptionPane.showInputDialog(this, "Enter the ticket NO to cancel the ticket");
    
        // Check if the user pressed Cancel or entered an empty date
        if (ticketNo.trim().isEmpty()) {
            return;
        }
        // Ask for confirmation
        int confirmResult = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel all tickets for the selected date?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );
    
        // Check user's confirmation
        if (confirmResult == JOptionPane.YES_OPTION) {
            // User confirmed, perform the database update to cancel the bus for the given date
            cancelBusForDate(username, ticketNo);
            // Refresh the displayed data
            displayData(username);
    }//GEN-LAST:event_jButton2ActionPerformed
    }
    private void cancelBusForDate(String email, String ticketNo) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
        String query = "DELETE FROM booking WHERE email = ? AND ticket_no = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, email);
            preparedStatement.setString(2, ticketNo);
            int rowsAffected = preparedStatement.executeUpdate();
            System.out.println(rowsAffected + " row(s) deleted for FullCancel");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle the exception as needed
    }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Get the selected row index
        int selectedRowIndex = jTable1.getSelectedRow();
    
        // Check if a row is selected
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row from the table to cancel.");
            return;
        }
    
        // Get the seat number from the selected row
        int seatNumber = (int) jTable1.getValueAt(selectedRowIndex, 9);
    
        // Ask for confirmation
        int confirmResult = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel the selected seat?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );
    
        // Check user's confirmation
        if (confirmResult == JOptionPane.YES_OPTION) {
            // User confirmed, perform the database update to cancel the ticket for the given seat
            cancelTicketForSeat(username, seatNumber);
    
            // Refresh the displayed data
            displayData(username);
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    private int getCanceledTicketFare() {
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow != -1) {
        // Assuming the fare is stored in the fifth column (index 4) of your table model
        return (int) jTable1.getValueAt(selectedRow, 4);
    } else {
        // No row is selected, handle this case accordingly
        return 0; // You may want to throw an exception or return a special value
    }
    }
    private void cancelTicketForSeat(String email, int seatNumber) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "DELETE FROM booking WHERE email = ? AND seat_no = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, email);
                preparedStatement.setInt(2, seatNumber);
                int rowsAffected = preparedStatement.executeUpdate();
                System.out.println(rowsAffected + " row(s) deleted for PartialCancel");
                 int canceledTicketFare = getCanceledTicketFare();

    if (canceledTicketFare > 0) {
        // Add the canceled ticket amount to the user's wallet
        addToWallet(username, canceledTicketFare);

        // Refresh the displayed data in the table
        displayData(username);
    } else {
        // Handle the case where no row is selected or fare is not positive
        JOptionPane.showMessageDialog(this, "Please select a valid ticket to cancel.", "Invalid Action", JOptionPane.WARNING_MESSAGE);
    }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    
    }
    private void addToWallet(String username, double amount) {
    try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
        String query = "UPDATE wallet SET amount = amount + ? WHERE username = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setDouble(1, amount);
            preparedStatement.setString(2, username);
            preparedStatement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Handle the exception appropriately
    }
}
    /**
     * @param args the command line arguments
     */
    private void displayData(String email) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "SELECT ticket_no, COUNT(*) as total_passengers, " +
                    "MAX(bus_no) as bus_no, MAX(travel_date) as travel_date, " +
                    "SUM(fare) as total_fare, SUM(fare * 0.18) as gst_amount, " +
                    "MAX(departure) as departure, MAX(arrival) as arrival, " +
                    "MAX(startingpt) as startingpt, MAX(destination) as destination " +
                    "FROM booking WHERE email = ? AND passenger_name IS NOT NULL GROUP BY ticket_no";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, email);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    DefaultTableModel model = new DefaultTableModel(
                            new Object[][]{},
                            new String[]{
                                    "Ticket Number", "Total Passengers", "Bus Number", "From", "To", "Departure_Time", "Arrival_Time", "Travel Date", "Fare"
                            }
                    ) {
                        boolean[] canEdit = new boolean[]{
                                false, false, false, false, false, false, false, false, false
                        };

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit[columnIndex];
                        }
                    };

                    while (resultSet.next()) {
                        int ticketNo = resultSet.getInt("ticket_no");
                        int totalPassengers = resultSet.getInt("total_passengers");
                        int busNo = resultSet.getInt("bus_no");
                        Date travelDate = resultSet.getDate("travel_date");
                        double totalFare = resultSet.getDouble("total_fare");
                        double gstAmount = resultSet.getDouble("gst_amount");
                        double totalFareWithGST = totalFare + gstAmount;
                        String departureTime = resultSet.getString("departure");
                        String arrivalTime = resultSet.getString("arrival");
                        String startingPt = resultSet.getString("startingpt");
                        String destination = resultSet.getString("destination");

                        model.addRow(new Object[]{
                                ticketNo, totalPassengers, busNo, startingPt, destination,
                                departureTime, arrivalTime, travelDate, totalFareWithGST
                        });
                    }

                    // Set the model to the table
                    jTable1.setModel(model);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    }

    private void goBackToHome() {
        home.setUser(username);
        home.setVisible(true);
        home.pack();
        home.setLocationRelativeTo(null);
        this.dispose();
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cancel1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cancel1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cancel1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cancel1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String email = "";
                Home2 home = new Home2();
                new Cancel1(email, home).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
