    /*
    * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
    * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
    */
    package loginandsignup;
    import java.util.Random;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.Date;
    import javax.swing.table.DefaultTableModel;

    /**
     *
     * @author 
     */
    public class Update extends javax.swing.JFrame {
        private Home2 home;
        private String username;
        String SUrl = "jdbc:mysql://localhost:3306/busresv";
        String SUser = "root";
        String SPass = "123";
        /**
         * Creates new form Update
         */
        public Update(String email,Home2 home) {
            initComponents();
            this.username = email;
            this.home = home;
            displayData(email);
            goBackToHome();
            // Modify the jComboBox2 initialization in your initComponents method
           
            
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        updateTravelDate = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loginandsignup/THE BLUE BUS1.png"))); // NOI18N
        jButton1.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51)));
        jTable1.setForeground(new java.awt.Color(255, 51, 51));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Passenger_Name", "Bus_No", "Travel_Date", "Ticket_No", "Fare", "Departure_time", "Arrival_Time", "StartingPt", "Destination", "Seat_No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        jTable1.setSelectionForeground(new java.awt.Color(255, 51, 51));
        jScrollPane1.setViewportView(jTable1);

        updateTravelDate.setText("UPDATE TRAVEL DATE");
        updateTravelDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTravelDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(updateTravelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(272, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateTravelDate, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        private int generateRandomSeat(int busNo, Date travelDate) {
            // Generate a random seat number based on your logic
            // Replace this with your actual logic to generate a random seat number
            // For example, you can use the Random class
            // Ensure that the generated seat is not already booked for the selected date

            // Sample logic (replace with your own):
            int minSeatNumber = 1;
            int maxSeatNumber = getTotalSeats(busNo);
            int randomSeat;
            do {
                randomSeat = minSeatNumber + (int) (Math.random() * ((maxSeatNumber - minSeatNumber) + 1));
            } while (isSeatBooked(busNo, travelDate, randomSeat));

            return randomSeat;
        }
        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            goBackToHome();
        }//GEN-LAST:event_jButton1ActionPerformed
        private int getBookedSeatsCount(Date travelDate) {
        int bookedSeats = 0;
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "SELECT COUNT(*) FROM booking WHERE travel_date = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setDate(1, new java.sql.Date(travelDate.getTime()));
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        bookedSeats = resultSet.getInt(1);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
        return bookedSeats;
    }
    private int getTotalSeats(int busNo) {
        int totalSeats = 0;
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "SELECT capacity FROM bus WHERE id = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setInt(1, busNo);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        totalSeats = resultSet.getInt("capacity");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
        return totalSeats;
    }

    private void updateTravelDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTravelDateActionPerformed
        int selectedRowIndex = jTable1.getSelectedRow();

        if (selectedRowIndex != -1) {
            int busNo = (int) jTable1.getValueAt(selectedRowIndex, 1);
            int seat = (int) jTable1.getValueAt(selectedRowIndex,9);
            String startingPt = (String) jTable1.getValueAt(selectedRowIndex, 7);
            String destination = (String) jTable1.getValueAt(selectedRowIndex, 8);
            Date travelDate = (Date) jTable1.getValueAt(selectedRowIndex, 2);
            Date travelDate1 = jDateChooser1.getDate();
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
            String formattedTravelDate = sdf.format(travelDate1);
            System.out.println("Selected Travel Date: " + formattedTravelDate);
            //System.out.println("Selected Travel Date: " + travelDate1);
            int bookedSeats = getBookedSeatsCount(travelDate1);
            int totalSeats = getTotalSeats(busNo);

            if (bookedSeats < totalSeats) {
                // Generate a random seat number
                int randomSeat = generateRandomSeat(busNo, travelDate1);

                // Allow the update with the randomly selected seat
                updateBooking(busNo, travelDate1, randomSeat,travelDate,seat);

                // Optionally, you can show a confirmation message or perform additional actions

                // Close the current window or perform any other necessary actions
                this.dispose();
            } else {
                System.out.println("Bus is full for the selected date.");
            }
        } else {
            System.out.println("Please select a row before clicking 'UPDATE TRAVEL DATE'.");
        }
    }//GEN-LAST:event_updateTravelDateActionPerformed
    private void updateBooking(int busNo, Date travelDate1, int newSeatNo,Date travelDate,int seat) {
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String updateQuery = "UPDATE booking SET travel_date = ?, seat_no = ? WHERE bus_no = ? AND travel_date = ? AND seat_no = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {
                // Set the parameters in the prepared statement
                preparedStatement.setDate(1, new java.sql.Date(travelDate1.getTime())); // This is the new travel date
                preparedStatement.setInt(2, newSeatNo); // This is the new seat number
                preparedStatement.setInt(3, busNo);
                preparedStatement.setDate(4, new java.sql.Date(travelDate.getTime())); // This is the original travel date in the WHERE clause
                preparedStatement.setInt(5,seat);
                // Execute the update statement
                int rowsAffected = preparedStatement.executeUpdate();
    
                // Check if the update was successful
                if (rowsAffected > 0) {
                    System.out.println("Booking updated successfully.");
                    displayData(username);
                    
                } else {
                    System.out.println("Failed to update booking. No matching records found.");
                }
    
                // Additional debugging
                System.out.println("Rows affected: " + rowsAffected);
                System.out.println("Query executed: " + preparedStatement.toString());
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    }
    
    

    private boolean isSeatBooked(int busNo, Date travelDate, int seatNo) {
        // Check if the seat is already booked for the selected date
        // Return true if booked, false otherwise
        // Implement this method based on your database structure
        // For example, query the booking table to check if the seat is booked for the given date
        // Return true if the seat is booked, false otherwise

        // Sample logic (replace with your own):
        try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
            String query = "SELECT COUNT(*) FROM booking WHERE bus_no = ? AND travel_date = ? AND seat_no = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setInt(1, busNo);
                preparedStatement.setDate(2, new java.sql.Date(travelDate.getTime()));
                preparedStatement.setInt(3, seatNo);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getInt(1) > 0;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }

        return false; // Default to false if an error occurs
    }
        private void displayData(String email) {
            try (Connection connection = DriverManager.getConnection(SUrl, SUser, SPass)) {
                String query = "SELECT * FROM booking WHERE email = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, email);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.setRowCount(0);
                        while (resultSet.next()) {
                            String passengerName = resultSet.getString(1);
                            int busNo = resultSet.getInt(2);
                            Date travelDate = resultSet.getDate(3);
                            int ticketNo = resultSet.getInt(4);
                            int fare = resultSet.getInt(5);
                            String departureTime = resultSet.getString(6);
                            String arrivalTime = resultSet.getString(7);
                            String startingPt = resultSet.getString(8);
                            String destination = resultSet.getString(9);
                            int seatNo = resultSet.getInt(11);
                            model.addRow(new Object[]{
                                    passengerName, busNo, travelDate, ticketNo, fare,
                                    departureTime, arrivalTime, startingPt, destination, seatNo
                            });
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                // Handle the exception as needed
            } finally {
                // Close resources in a finally block
                // Close the connection, statement, and result set here if needed
            }
        }

        /**
         * @param args the command line arguments
         */
        private void goBackToHome() {
            // Assuming the Home2 instance is stored in 'home'
            home.setUser(username); // Set the user's email in Home2
            home.setVisible(true);
            home.pack();
            home.setLocationRelativeTo(null);
            this.dispose();
        }
        public static void main(String args[]) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    String email = "YourEmail@example.com";
                    Home2 home = new Home2();
                    new Update(email,new Home2()).setVisible(true);
                }
            });
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton updateTravelDate;
    // End of variables declaration//GEN-END:variables
    }
